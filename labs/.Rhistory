label.cex = 0.8             # change the label size
)
actor.deg / M
sort()
sort(actor.deg / M)
v.size
sort(v.size)
v.size
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = PaulRevereNet %v% "people.names",    # add the individual names
label.cex = 0.4                              # change the label size
)
# execute the plot
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = v.size,    # add the individual names
label.cex = 0.4                              # change the label size
)
# execute the plot
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = round( v.size, 2 ),    # add the individual names
label.cex = 0.4                              # change the label size
)
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = round( v.size, 2 ),    # add the individual names
label.cex = 0.4                              # change the label size
)
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = round( v.size, 2 ),    # add the individual names
label.cex = 0.4, label.pos = 1                              # change the label size
)
network.vertex.names(PaulRevereNet)
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = network.vertex.names(PaulRevereNet),    # add the individual names
label.cex = 0.4, label.pos = 1                              # change the label size
)
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = PaulRevereNet %v% "people.names",    # add the individual names
label.cex = 0.4, label.pos = 1                              # change the label size
)
cbind(PaulRevereNet %v% "people.names", network.vertex.names(PaulRevereNet))
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = PaulRevereNet %v% "people.names",    # add the individual names
label.cex = 0.4                              # change the label size
)
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                               # our network to plot
gmode = "twomode",                           # indicate it is two modes
usearrows = FALSE,                           # turn off the arrowheads
main="Paul Revere Network",                  # add a title
vertex.cex = v.size + 0.5,                   # set the size (add 0.5 so it is not too small)
label = PaulRevereNet %v% "people.names",    # add the individual names
label.cex = 0.4,                             # change the label size
label.pos = 1                                # set the label position
)
actor.gt.mean <- actor.deg / M
actor.gt.mean[ actor.gt.mean != max( actor.deg / M ) ] <- 0
actor.gt.mean[ actor.gt.mean == max( actor.deg / M ) ] <- 1
actor.gt.mean
max( actor.deg / M )
sort( actor.deg / M )
actor.adj.names <- PaulRevereNet %v% "people.names"
actor.adj.names
M + N
actor.adj.names <- rep( NA, N + M )
actor.adj.names
actor.adj.names <- PaulRevereNet %v% "people.names"
# if the name is not Paul Revere, make it NA
actor.adj.names[ actor.adj.names != "Paul Revere" ] <- NA
actor.adj.names
which(PaulRevereNet %v% "people.names" == "Paul Revere")
which(actor.adj.names == "Paul Revere")
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,              # our network to plot
gmode = "twomode",          # indicate it is two modes
usearrows = FALSE,          # turn off the arrowheads
main="Paul Revere Network", # add a title
vertex.cex = v.size + 0.5,  # set the size (add 0.5 so it is not too small)
label = actor.adj.names,    # add the individual names
label.cex = 0.8             # change the label size
)
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,              # our network to plot
gmode = "twomode",          # indicate it is two modes
usearrows = FALSE,          # turn off the arrowheads
main="Paul Revere Network", # add a title
vertex.cex = v.size + 0.5,  # set the size (add 0.5 so it is not too small)
label = actor.adj.names,    # add the individual names
label.cex = 0.8,            # change the label size
label.pos = 1               # position the label in the center
)
?label.pos
help(gplot)
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,              # our network to plot
gmode = "twomode",          # indicate it is two modes
usearrows = FALSE,          # turn off the arrowheads
main="Paul Revere Network", # add a title
vertex.cex = v.size + 0.5,  # set the size (add 0.5 so it is not too small)
label = actor.adj.names,    # add the individual names
label.cex = 0.8,            # change the label size
label.pos = 5               # position the label in the center
)
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                            # our network to plot
gmode = "twomode",                        # indicate it is two modes
usearrows = FALSE,                        # turn off the arrowheads
main="Paul Revere Network",               # add a title
vertex.cex = v.size + 0.5,                # set the size (add 0.5 so it is not too small)
label = PaulRevereNet %v% "place.names",  # add the individual names
label.cex = 0.4,                          # change the label size
label.pos = 5                             # set the label position
)
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                            # our network to plot
gmode = "twomode",                        # indicate it is two modes
usearrows = FALSE,                        # turn off the arrowheads
main="Paul Revere Network",               # add a title
vertex.cex = v.size + 0.5,                # set the size (add 0.5 so it is not too small)
label = PaulRevereNet %v% "place.names",  # add the individual names
label.cex = 1.2,                          # change the label size
label.pos = 5                             # set the label position
)
sort( event.deg / N )
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PaulRevereNet,                            # our network to plot
gmode = "twomode",                        # indicate it is two modes
usearrows = FALSE,                        # turn off the arrowheads
main="Paul Revere Network",               # add a title
vertex.cex = v.size + 0.5,                # set the size (add 0.5 so it is not too small)
label = PaulRevereNet %v% "place.names",  # add the individual names
label.cex = 1.2,                          # change the label size
label.pos = 5,                            # set the label position
edge.col = "grey80"                       # change the color of the edges
)
# create the function
rescale <- function( nchar, low, high ){
min_d <- min( nchar )
max_d <- max( nchar )
rscl  <- ( ( high - low )*( nchar - min_d ) ) / ( max_d - min_d ) + low
rscl
}
rescale( v.size, 0.2, 2, 0.5 )
# execute the plot
gplot(
PaulRevereNet,
gmode = "twomode",
usearrows = FALSE,
main="Paul Revere Network",
vertex.cex = rescale( v.size, 0.2, 2 ), # rescale the sizes
label = PaulRevereNet %v% "place.names",
label.cex = 1.2,
label.pos = 5,
edge.col = "grey80"                            # change the color of the edges
)
# execute the plot
gplot(
PaulRevereNet,
gmode = "twomode",
usearrows = FALSE,
main="Paul Revere Network",
vertex.cex = v.size + 0.5,
label = PaulRevereNet %v% "place.names",
label.cex = rescale( v.size, 0.2, 1.2 ),
label.pos = 5,
edge.col = "grey80"                            # change the color of the edges
)
# execute the plot
gplot(
PaulRevereNet,
gmode = "twomode",
usearrows = FALSE,
main="Paul Revere Network",
vertex.cex = v.size + 0.5,
label = PaulRevereNet %v% "place.names",
label.cex = rescale( v.size, 0.5, 2.2 ),
label.pos = 5,
edge.col = "grey80"                            # change the color of the edges
)
# execute the plot
gplot(
PaulRevereNet,
gmode = "twomode",
usearrows = FALSE,
main="Paul Revere Network",
vertex.cex = v.size + 0.5,
label = PaulRevereNet %v% "place.names",
label.cex = rescale( v.size, 0.3, 1.8 ), # pass the rescale function to the label.cex argument
label.pos = 5,
edge.col = "grey80"                      # change the color of the edges
)
# clear the workspace so we don't use any duplicate names
rm( list = ls() )
# define the path location for the file
loc <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-philippine-kidnappings-net.rds"
PhilKidnapNet <- readRDS( url( loc ) )
# look at the network
PhilKidnapNet
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PhilKidnapNet,
gmode = "twomode",
usearrows = FALSE,
vertex.cex=2,
main="Philippe Kidnapping Network"
)
# create a matrix from the network object
PhilKidnapMat <- as.matrix( PhilKidnapNet )
# identify the number of edges in the graph
L <- sum( PhilKidnapMat )
# identify the number of actors in the example
N <- dim( PhilKidnapMat )[1]
# identify the number of events in the example
M <- dim( PhilKidnapMat )[2]
# calculate the density
density.PhilKidnap <- L / ( N * M )
# check it out
density.PhilKidnap
round( density.PhilKidnap, 2 ) * 100
round( density.PhilKidnap, 3 ) * 100
# raw scores for actors
actor.deg <- rowSums( PhilKidnapMat )
actor.deg
# raw scores for events
event.deg <- colSums( PhilKidnapMat )
event.deg
# mean degree for actors
mean.actor.deg <- L / N
# mean degree for events
mean.event.deg <- L / M
# an alternative is to just use the mean() function with the degree data
mean( actor.deg )
mean( event.deg )
# standardized score for actors
actor.deg / M
# standardized score for events
event.deg / N
# mean standardized score for actors
mean( actor.deg / M )
# mean standardized score for events
mean( event.deg / N )
# define the standardized scores for actors
actor.size <- actor.deg / M
# define the standardized scores for events
event.size <- event.deg / N
# combine these to use in the plot
v.size <- c( actor.size, event.size )
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PhilKidnapNet,
gmode = "twomode",
usearrows = FALSE,
main="Philippe Kidnapping Network",
vertex.cex = v.size + 0.5
)
# execute the plot
gplot(
PhilKidnapNet,
gmode = "twomode",
usearrows = FALSE,
main="Philippe Kidnapping Network",
vertex.cex = v.size + 1.5
)
v.size
v.size*5
??network.vertex
PhilKidnapNet %v% "vertex.names"
# define the standardized scores for actors
actor.size <- actor.deg / M
# define the standardized scores for events
event.size <- event.deg / N
# combine these to use in the plot
v.size <- c( actor.size, event.size )
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PhilKidnapNet,
gmode = "twomode",
usearrows = FALSE,
main="Philippe Kidnapping Network",
vertex.cex = v.size + 1.5
)
# create the function
rescale <- function( nchar, low, high ){
min_d <- min( nchar )
max_d <- max( nchar )
rscl  <- ( ( high - low )*( nchar - min_d ) ) / ( max_d - min_d ) + low
rscl
}
# define the standardized scores for actors
actor.size <- actor.deg / M
# define the standardized scores for events
event.size <- event.deg / N
# combine these to use in the plot
v.size <- c( actor.size, event.size )
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PhilKidnapNet,
gmode = "twomode",
usearrows = FALSE,
main="Philippe Kidnapping Network",
vertex.cex = rescale( v.size, 0.5, 1.8 )
)
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PhilKidnapNet,
gmode = "twomode",
usearrows = FALSE,
main="Philippe Kidnapping Network",
vertex.cex = rescale( v.size, 0.5, 1.8 ),
label = PhilKidnapNet %v% "vertex.names",                          # add the individual names
label.cex = rescale( PhilKidnapNet %v% "vertex.names", 0.5, 1.2 ), # rescale the label sizes
label.pos = 5                                                      # set the label position
)
rescale( PhilKidnapNet %v% "vertex.names", 0.5, 1.2 )
PhilKidnapNet %v% "vertex.names"
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PhilKidnapNet,
gmode = "twomode",
usearrows = FALSE,
main="Philippe Kidnapping Network",
vertex.cex = rescale( v.size, 0.5, 1.8 ),
label = PhilKidnapNet %v% "vertex.names", # add the individual names
label.cex = rescale( v.size, 0.3, 1.8 ),  # pass the rescale function to the label.cex argument
label.pos = 5                             # set the label position
)
# set the seed to reproduce the plot layout
set.seed( 507 )
# execute the plot
gplot(
PhilKidnapNet,
gmode = "twomode",
usearrows = FALSE,
main="Philippe Kidnapping Network",
vertex.cex = rescale( v.size, 0.5, 1.8 ),
label = PhilKidnapNet %v% "vertex.names", # add the individual names
label.cex = rescale( v.size, 0.3, 1.8 ),  # pass the rescale function to the label.cex argument
label.pos = 5,                            # set the label position
edge.col = "grey80"                       # change the color of the edges
)
event.deg / N
sort(event.deg / N)
which(event.deg / N)
which( max( event.deg / N ) )
max( event.deg / N )
which(event.deg / n == max( event.deg / N ))
which(event.deg / N == max( event.deg / N ))
which(event.deg / N == max( event.deg / N ))[1]
which( actor.deg / M == max( actor.deg / M ) )
library(sna)
library(network)
# set the url
loc <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-PHX-arrest-2023-net.rds"
# for the 2023
PhxArrestNet2023 <- readRDS( url( loc ) )
PhxArrestNet2023
# set the url
loc <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-PHX-arrest-2022-net.rds"
# for the 2022
PhxArrestNet2022 <- readRDS( url( loc ) )
PhxArrestNet2022
<br>
# install the packages
install.packages( "sna" )
install.packages( "devtools" )
# call the libraries
library( sna )
library( devtools )
# install from Github
install_github( "DougLuke/UserNetR" )
# call that library
library( UserNetR )
library( network )
library( sna )
# define the path
url <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-undirected-example.csv"
# import the undirected matrix
mat.u <- read.csv(
url,
as.is = TRUE,
header = TRUE,
row.names = 1
)
net.u <- as.matrix(mat.u)
net.u <- as.matrix(mat.u, directed = FALSE)
net.u
# created a directed matrix
mat.d <- matrix(
c(0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0),
nrow=5,
byrow=TRUE
)
# attach row names
rownames( mat.d ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
# attach column names
colnames( mat.d ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
# print out the object
mat.d
# define the path
url <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-undirected-example.csv"
# import the undirected matrix
mat.u <- read.csv(
url,
as.is = TRUE,
header = TRUE,
row.names = 1
)
mat.u
# coerce the matrix object
net.u <- as.network(
mat.u,
directed = FALSE # set this to false for an undirected network; TRUE for a directed network
)
mat.u
dim(mat.u)
mat.u2 <- read.csv(
url,
as.is = TRUE,
header = TRUE,
row.names = 1
)
mat.u2
mat.u <- read.csv(
url,
as.is = TRUE,
header = TRUE,
row.names = 1
)
mat.u
