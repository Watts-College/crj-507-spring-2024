# Script to run render labs ----
# Load the libraries
library( knitr )
library( rmarkdown )
library( here )
# Script to run render labs ----
# load the libraries
library( knitr )
library( rmarkdown )
library( here )
# create the instructions
render( here( "labs/lab-01-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-02-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-03-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-04-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-05-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-06-instructions.Rmd" ), "html_document" )
# create the templates
render( here( "labs/lab-02-template.Rmd" ), "html_document" )
# Script to run render labs ----
# load the libraries
library( knitr )
library( rmarkdown )
library( here )
# create the instructions
render( here( "labs/lab-01-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-02-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-03-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-04-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-05-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-06-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-02-template.Rmd" ), "html_document" )
library( network )
library( sna )
# define the path
url <- "https://github.com/jacobtnyoung/sna-textbook/raw/main/data/data-undirected-example.csv"
# import the undirected matrix
mat.u <- read.csv(
url,
as.is = TRUE,
header = TRUE,
row.names = 1
)
# created a directed matrix
mat.d <- matrix(
c(0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0),
nrow=5,
byrow=TRUE
)
# attach row names
rownames( mat.d ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
# attach column names
colnames( mat.d ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
# print out the object
mat.d
net.u <- as.network(
mat.u, # this is the matrix we want to create a network from
directed = FALSE # tell the function it is an undirected network
)
mat.u
# created a directed matrix
mat.d <- matrix(
c(0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0),
nrow=5,
byrow=TRUE
)
net.u <- as.network(
mat.u, # this is the matrix we want to create a network from
directed = FALSE # tell the function it is an undirected network
)
# created a directed matrix
mat.d <- matrix(
c(0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0),
nrow=5,
byrow=TRUE
)
mat.d
mat.u
# created a directed matrix
mat.d <- matrix(
c(0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0),
nrow=5,
byrow=TRUE
)
# attach row names
rownames( mat.d ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
# attach column names
colnames( mat.d ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
# print out the object
mat.d
net.d <- as.network(
mat.d, # this is the matrix we want to create a network from
directed = TRUE # tell the function it is a directed network
)
mat.u
net.u <- as.network(
mat.u, # this is the matrix we want to create a network from
directed = FALSE # tell the function it is an undirected network
)
net.u
dim(mat.u)
# produce the plot
gplot(
mat.u,                          # this is the network to plot
vertex.col = "lightblue",       # color the nodes
vertex.cex = 1.2,               # size of the nodes (bigger number is bigger nodes)
edge.col = "grey80",            # color the ties
edge.lwd = 1.2,                 # the width of the ties (bigger is wider)
main = "Plot of undirected net" # add a title
)
net.u <- as.network(
mat.u, # this is the matrix we want to create a network from
directed = FALSE # tell the function it is an undirected network
)
net.u <- as.network(
mat.u, # this is the matrix we want to create a network from
directed = TRUE # tell the function it is an undirected network
)
net.u <- network(
mat.u, # this is the matrix we want to create a network from
directed = FALSE # tell the function it is an undirected network
)
render( here( "labs/lab-03-template.Rmd" ), "html_document" )
# Script to run render labs ----
# load the libraries
library( knitr )
library( rmarkdown )
library( here )
# create the instructions
render( here( "labs/lab-01-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-02-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-03-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-04-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-05-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-06-instructions.Rmd" ), "html_document" )
render( here( "labs/final-project-instructions.Rmd" ), "html_document" )
# create the templates
render( here( "labs/lab-02-template.Rmd" ), "html_document" )
render( here( "labs/lab-03-template.Rmd" ), "html_document" )
render( here( "labs/lab-04-template.Rmd" ), "html_document" )
render( here( "labs/lab-05-template.Rmd" ), "html_document" )
render( here( "labs/lab-06-template.Rmd" ), "html_document" )
render( here( "labs/final-project-template.Rmd" ), "html_document" )
# Script to run render tutorials ----
# load the libraries
library( knitr )
library( rmarkdown )
library( here )
# Script to run render tutorials ----
# load the libraries
library( knitr )
library( rmarkdown )
library( here )
# create the tutorials
render( here( "tutorials/tutorial-01-r-intro-to-r.Rmd" ), "html_document" )
render( here( "tutorials/tutorial-02-intro-to-rmarkdown.Rmd" ), "html_document" )
render( here( "tutorials/tutorial-03-network-data.Rmd" ), "html_document" )
render( here( "tutorials/tutorial-04-visualization.Rmd" ), "html_document" )
install_github( "DougLuke/UserNetR" )
render( here( "tutorials/tutorial-04-visualization.Rmd" ), "html_document" )
render( here( "tutorials/tutorial-05-degree-centrality.Rmd" ), "html_document" )
render( here( "tutorials/tutorial-06-closeness-centrality.Rmd" ), "html_document" )
render( here( "tutorials/tutorial-07-betweenness-centrality.Rmd" ), "html_document" )
render( here( "tutorials/tutorial-08-bipartite-twomode.Rmd" ), "html_document" )
render( here( "tutorials/tutorial-09-projection.Rmd" ), "html_document" )
# Script to run render labs ----
# load the libraries
library( knitr )
library( rmarkdown )
library( here )
# create the instructions
render( here( "labs/lab-01-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-02-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-03-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-04-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-05-instructions.Rmd" ), "html_document" )
render( here( "labs/lab-06-instructions.Rmd" ), "html_document" )
render( here( "labs/final-project-instructions.Rmd" ), "html_document" )
# create the templates
render( here( "labs/lab-02-template.Rmd" ), "html_document" )
render( here( "labs/lab-03-template.Rmd" ), "html_document" )
render( here( "labs/lab-04-template.Rmd" ), "html_document" )
render( here( "labs/lab-05-template.Rmd" ), "html_document" )
render( here( "labs/lab-06-template.Rmd" ), "html_document" )
render( here( "labs/final-project-template.Rmd" ), "html_document" )
here()
library(network)
?plot.network
library( network )
# Undirected graph
u.mat <- rbind(
c( 0,1,0,0,0 ),
c( 1,0,1,0,0 ),
c( 0,1,0,1,1 ),
c( 0,0,1,0,1 ),
c( 0,0,1,1,0 ) )
rownames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
colnames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
u.net <- network( u.mat, matrix.type = "adjacency", directed = FALSE )
u.c.mat <- u.mat
u.c.mat[u.mat == 0] <- 1
diag( u.c.mat ) <- 0
#par( mar=c( 0.1, 3, 0, 0.1 ), mfrow = c( 1, 2 ) )
set.seed( 19141 )
gplot( u.mat,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
library( network )
# Undirected graph
u.mat <- rbind(
c( 0,1,0,0,0 ),
c( 1,0,1,0,0 ),
c( 0,1,0,1,1 ),
c( 0,0,1,0,1 ),
c( 0,0,1,1,0 ) )
rownames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
colnames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
u.net <- network( u.mat, matrix.type = "adjacency", directed = FALSE )
u.c.mat <- u.mat
u.c.mat[u.mat == 0] <- 1
diag( u.c.mat ) <- 0
#par( mar=c( 0.1, 3, 0, 0.1 ), mfrow = c( 1, 2 ) )
set.seed( 19141 )
plot( u.mat,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
title( "Undirected Graph", line = -5 )
library( network )
library( sna )
# Undirected graph
u.mat <- rbind(
c( 0,1,0,0,0 ),
c( 1,0,1,0,0 ),
c( 0,1,0,1,1 ),
c( 0,0,1,0,1 ),
c( 0,0,1,1,0 ) )
rownames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
colnames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
u.net <- network( u.mat, matrix.type = "adjacency", directed = FALSE )
u.c.mat <- u.mat
u.c.mat[u.mat == 0] <- 1
diag( u.c.mat ) <- 0
plot( u.mat,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
plot.network( u.mat,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
u.net <- as.network( u.mat, directed = FALSE)
plot( u.net,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
library( network )
library( sna )
# Undirected graph
u.mat <- rbind(
c( 0,1,0,0,0 ),
c( 1,0,1,0,0 ),
c( 0,1,0,1,1 ),
c( 0,0,1,0,1 ),
c( 0,0,1,1,0 ) )
rownames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
colnames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
u.net <- network( u.mat, matrix.type = "adjacency", directed = FALSE )
u.c.mat <- u.mat
u.c.mat[u.mat == 0] <- 1
diag( u.c.mat ) <- 0
#par( mar=c( 0.1, 3, 0, 0.1 ), mfrow = c( 1, 2 ) )
u.net <- as.network( u.mat, directed = FALSE)
plot( u.net,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
title( "Undirected Graph", line = -5 )
library( network )
library( sna )
# Undirected graph
u.mat <- rbind(
c( 0,1,0,0,0 ),
c( 1,0,1,0,0 ),
c( 0,1,0,1,1 ),
c( 0,0,1,0,1 ),
c( 0,0,1,1,0 ) )
rownames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
colnames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
u.net <- network( u.mat, matrix.type = "adjacency", directed = FALSE )
u.c.mat <- u.mat
u.c.mat[u.mat == 0] <- 1
diag( u.c.mat ) <- 0
par( mar=c( 0.1, 3, 0, 0.1 ), mfrow = c( 1, 2 ) )
u.net <- as.network( u.mat, directed = FALSE)
plot( u.net,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
title( "Undirected Graph", line = -5 )
library( network )
library( sna )
# Undirected graph
u.mat <- rbind(
c( 0,1,0,0,0 ),
c( 1,0,1,0,0 ),
c( 0,1,0,1,1 ),
c( 0,0,1,0,1 ),
c( 0,0,1,1,0 ) )
rownames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
colnames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
u.net <- network( u.mat, matrix.type = "adjacency", directed = FALSE )
u.c.mat <- u.mat
u.c.mat[u.mat == 0] <- 1
diag( u.c.mat ) <- 0
par( mar=c( 0.1, 3, 0, 0.1 ), mfrow = c( 1, 1 ) )
u.net <- as.network( u.mat, directed = FALSE)
plot( u.net,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
title( "Undirected Graph", line = -5 )
library( network )
library( sna )
# Undirected graph
u.mat <- rbind(
c( 0,1,0,0,0 ),
c( 1,0,1,0,0 ),
c( 0,1,0,1,1 ),
c( 0,0,1,0,1 ),
c( 0,0,1,1,0 ) )
rownames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
colnames( u.mat ) <- c( "Jen","Tom","Bob","Leaf","Jim" )
u.net <- network( u.mat, matrix.type = "adjacency", directed = FALSE )
u.c.mat <- u.mat
u.c.mat[u.mat == 0] <- 1
diag( u.c.mat ) <- 0
par( mar=c( 0.01, 3, 0, 0.1 ), mfrow = c( 1, 1 ) )
u.net <- as.network( u.mat, directed = FALSE)
plot( u.net,
usearrows=FALSE,
vertex.cex=3.2,
vertex.col = "lightblue",
displaylabels = TRUE,
label.pos=5,
label.cex = 0.8 )
title( "Undirected Graph", line = -5 )
